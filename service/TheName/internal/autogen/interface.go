// Package autogen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package autogen

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Удаление информации о людях
	// (DELETE /humans)
	DeleteHumans(w http.ResponseWriter, r *http.Request, params DeleteHumansParams)
	// Получение информации о людях
	// (GET /humans)
	GetHumans(w http.ResponseWriter, r *http.Request, params GetHumansParams)
	// Создание информации о людях
	// (POST /humans)
	AddHumans(w http.ResponseWriter, r *http.Request)
	// Обновление информации о людях
	// (PUT /humans)
	UpdateHumans(w http.ResponseWriter, r *http.Request)
	// Удаление информации о человеке
	// (DELETE /humans/{humanId})
	DeleteHuman(w http.ResponseWriter, r *http.Request, humanId int)
	// Получение информации о человеке
	// (GET /humans/{humanId})
	GetHuman(w http.ResponseWriter, r *http.Request, humanId int)
	// Обновление информации о человеке
	// (PUT /humans/{humanId})
	UpdateHuman(w http.ResponseWriter, r *http.Request, humanId int)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Удаление информации о людях
// (DELETE /humans)
func (_ Unimplemented) DeleteHumans(w http.ResponseWriter, r *http.Request, params DeleteHumansParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение информации о людях
// (GET /humans)
func (_ Unimplemented) GetHumans(w http.ResponseWriter, r *http.Request, params GetHumansParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Создание информации о людях
// (POST /humans)
func (_ Unimplemented) AddHumans(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление информации о людях
// (PUT /humans)
func (_ Unimplemented) UpdateHumans(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удаление информации о человеке
// (DELETE /humans/{humanId})
func (_ Unimplemented) DeleteHuman(w http.ResponseWriter, r *http.Request, humanId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение информации о человеке
// (GET /humans/{humanId})
func (_ Unimplemented) GetHuman(w http.ResponseWriter, r *http.Request, humanId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление информации о человеке
// (PUT /humans/{humanId})
func (_ Unimplemented) UpdateHuman(w http.ResponseWriter, r *http.Request, humanId int) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteHumans operation middleware
func (siw *ServerInterfaceWrapper) DeleteHumans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteHumansParams

	// ------------- Required query parameter "ids" -------------

	if paramValue := r.URL.Query().Get("ids"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "ids"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "ids", r.URL.Query(), &params.Ids)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ids", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHumans(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHumans operation middleware
func (siw *ServerInterfaceWrapper) GetHumans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHumansParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "id" -------------

	err = runtime.BindQueryParameter("form", true, false, "id", r.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "surname" -------------

	err = runtime.BindQueryParameter("form", true, false, "surname", r.URL.Query(), &params.Surname)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "surname", Err: err})
		return
	}

	// ------------- Optional query parameter "patronymic" -------------

	err = runtime.BindQueryParameter("form", true, false, "patronymic", r.URL.Query(), &params.Patronymic)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "patronymic", Err: err})
		return
	}

	// ------------- Optional query parameter "age" -------------

	err = runtime.BindQueryParameter("form", true, false, "age", r.URL.Query(), &params.Age)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "age", Err: err})
		return
	}

	// ------------- Optional query parameter "sex" -------------

	err = runtime.BindQueryParameter("form", true, false, "sex", r.URL.Query(), &params.Sex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sex", Err: err})
		return
	}

	// ------------- Optional query parameter "nation" -------------

	err = runtime.BindQueryParameter("form", true, false, "nation", r.URL.Query(), &params.Nation)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nation", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_by" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_by", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_by", Err: err})
		return
	}

	// ------------- Optional query parameter "sort_scale" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort_scale", r.URL.Query(), &params.SortScale)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort_scale", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHumans(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AddHumans operation middleware
func (siw *ServerInterfaceWrapper) AddHumans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddHumans(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateHumans operation middleware
func (siw *ServerInterfaceWrapper) UpdateHumans(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHumans(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteHuman operation middleware
func (siw *ServerInterfaceWrapper) DeleteHuman(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "humanId" -------------
	var humanId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "humanId", runtime.ParamLocationPath, chi.URLParam(r, "humanId"), &humanId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "humanId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteHuman(w, r, humanId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHuman operation middleware
func (siw *ServerInterfaceWrapper) GetHuman(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "humanId" -------------
	var humanId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "humanId", runtime.ParamLocationPath, chi.URLParam(r, "humanId"), &humanId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "humanId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHuman(w, r, humanId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateHuman operation middleware
func (siw *ServerInterfaceWrapper) UpdateHuman(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "humanId" -------------
	var humanId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "humanId", runtime.ParamLocationPath, chi.URLParam(r, "humanId"), &humanId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "humanId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateHuman(w, r, humanId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/humans", wrapper.DeleteHumans)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/humans", wrapper.GetHumans)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/humans", wrapper.AddHumans)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/humans", wrapper.UpdateHumans)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/humans/{humanId}", wrapper.DeleteHuman)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/humans/{humanId}", wrapper.GetHuman)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/humans/{humanId}", wrapper.UpdateHuman)
	})

	return r
}
